# Advanced SQL Logic Tests for DataClod

# Test complex queries with multiple joins
statement ok
CREATE TABLE users (user_id INTEGER, username TEXT, email TEXT);

statement ok
CREATE TABLE orders (order_id INTEGER, user_id INTEGER, amount DECIMAL, status TEXT);

statement ok
CREATE TABLE products (product_id INTEGER, name TEXT, price DECIMAL);

statement ok
CREATE TABLE order_items (order_id INTEGER, product_id INTEGER, quantity INTEGER);

statement ok
INSERT INTO users VALUES (1, 'alice', 'alice@example.com'), (2, 'bob', 'bob@example.com'), (3, 'charlie', 'charlie@example.com');

statement ok
INSERT INTO orders VALUES (100, 1, 150.00, 'completed'), (200, 2, 275.50, 'pending'), (300, 3, 425.75, 'completed');

statement ok
INSERT INTO products VALUES (1, 'Widget A', 25.00), (2, 'Widget B', 50.00), (3, 'Widget C', 75.00);

statement ok
INSERT INTO order_items VALUES (100, 1, 2), (100, 2, 1), (200, 2, 3), (200, 3, 2), (300, 1, 1), (300, 3, 4);

# Test complex JOIN with aggregation
query T R I
SELECT u.username, SUM(o.amount) as total_spent, COUNT(oi.product_id) as items_bought
FROM users u
JOIN orders o ON u.user_id = o.user_id
JOIN order_items oi ON o.order_id = oi.order_id
WHERE o.status = 'completed'
GROUP BY u.username, u.user_id
ORDER BY total_spent DESC;
----
alice 150.00 3
charlie 425.75 5

# Test window functions (if supported)
# query I R
# SELECT user_id, amount,
#   SUM(amount) OVER (PARTITION BY user_id ORDER BY order_id) as running_total
# FROM orders
# ORDER BY user_id, order_id;
# ----

# Test CTE (Common Table Expression)
query T R
WITH user_totals AS (
    SELECT u.username, SUM(o.amount) as total
    FROM users u
    JOIN orders o ON u.user_id = o.user_id
    GROUP BY u.username, u.user_id
)
SELECT username, total FROM user_totals WHERE total > 200;
----
bob 275.50
charlie 425.75

# Test subquery in SELECT
query T R I
SELECT u.username,
       (SELECT SUM(oi.quantity) FROM order_items oi JOIN orders o ON oi.order_id = o.order_id WHERE o.user_id = u.user_id) as total_items,
       (SELECT AVG(o.amount) FROM orders o WHERE o.user_id = u.user_id) as avg_order
FROM users u
ORDER BY u.username;
----
alice 3 150.00
bob 5 275.50
charlie 5 425.75

# Test EXISTS subquery
query T
SELECT username FROM users u WHERE EXISTS (
    SELECT 1 FROM orders o WHERE o.user_id = u.user_id AND o.amount > 200
);
----
bob
charlie

# Test CASE expressions
query T R
SELECT username,
       CASE
           WHEN (SELECT SUM(o.amount) FROM orders o WHERE o.user_id = u.user_id) > 300 THEN 'High Value'
           WHEN (SELECT SUM(o.amount) FROM orders o WHERE o.user_id = u.user_id) > 100 THEN 'Medium Value'
           ELSE 'Low Value'
       END as customer_segment
FROM users u
ORDER BY u.username;
----
alice Medium Value
bob Medium Value
charlie High Value

# Clean up tables
statement ok
DROP TABLE order_items;

statement ok
DROP TABLE products;

statement ok
DROP TABLE orders;

statement ok
DROP TABLE users;